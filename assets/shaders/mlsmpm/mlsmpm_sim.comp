#version 460 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer PosBuffer {
    vec4 positions[];
};

layout(std430, binding = 1) buffer VBuffer {
    vec4 velocities[]; // vec3 velocity + float mass
};

layout(std430, binding = 2) buffer GridBuffer {
    vec4 gridStatus[]; // vec3 velocity + float mass
};

layout(std430, binding = 3) buffer CBuffer {
    mat3 affineC[]; // APIC affine velocity field
};

layout(std430, binding = 4) buffer FBuffer {
    mat3 F[]; // deformation gradient
};

uniform float deltaTime;
uniform ivec3 gridRes;
uniform int gridBoundary;

void main() {
    ivec3 id = ivec3(gl_GlobalInvocationID.xyz);
    if (any(greaterThanEqual(id, vec3(gridRes)))) return;

    int index = id.x + gridRes.x * id.y + gridRes.x * gridRes.y * id.z;
    vec4 status = gridStatus[index];
    float mass = status.w;

    if (mass > 0.0) {
        vec3 velocity = status.xyz / mass;

        // Add external force (gravity)
        velocity.y += deltaTime * -9.8;

        // Handle boundary
        int boundary = gridBoundary;
        //if(id.x < boundary || id.x > gridRes - boundary - 1) velocity.x = 0.0;
        //if(id.y < boundary || id.y > gridRes - boundary - 1) velocity.y = 0.0;
        //if(id.z < boundary || id.z > gridRes - boundary - 1) velocity.z = 0.0;
        if (id.y > gridRes.y-boundary-1 && velocity.y > 0) velocity.y = 0.0;
        if (id.y < boundary && velocity.y < 0) velocity.y = 0.0;

        if (id.x > gridRes.x-boundary-1 && velocity.x > 0) velocity.x = 0.0;
        if (id.x < boundary && velocity.x < 0) velocity.x = 0.0;

        if (id.z > gridRes.z-boundary-1 && velocity.z > 0) velocity.z = 0.0;
        if (id.z < boundary && velocity.z < 0) velocity.z = 0.0;

        // Write back
        gridStatus[index].xyz = velocity;  
    }
}
