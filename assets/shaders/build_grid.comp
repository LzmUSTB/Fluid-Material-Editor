#version 460
layout(local_size_x = 256) in;

struct Particle { vec3 position; };
layout(std430, binding=0) buffer ParticleBuffer { Particle particles[]; };
layout(std430, binding=1) buffer GridIndexBuffer { int gridIndices[]; };
layout(std430, binding=2) buffer GridCounterBuffer { atomic_uint gridCounters[]; };

uniform ivec3 gridDim;
uniform float cellSize;

void main() {
    uint idx = gl_GlobalInvocationID.x;
    Particle p = particles[idx];
    
    // 计算网格坐标
    ivec3 gridCoord = ivec3(floor(p.position / cellSize));
    int gridHash = gridCoord.x + gridCoord.y * gridDim.x 
                 + gridCoord.z * gridDim.x * gridDim.y;
    
    // 原子操作写入索引
    uint counter = atomicCounterIncrement(gridCounters[gridHash]);
    gridIndices[gridHash * MAX_PARTICLES_PER_CELL + counter] = idx;
}