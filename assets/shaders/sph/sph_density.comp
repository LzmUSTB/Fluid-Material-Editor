#version 460 core
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer PosBuffer {
    vec4 positions[];  // vec3 positions + float density
};

layout(std430, binding = 1) buffer VBuffer {
    vec4 velocities[]; // vec3 velocity + float mass
};

layout(std430, binding = 2) buffer GridBuffer {
    vec4 gridStatus[]; // vec3 velocity + float mass
};

layout(std430, binding = 3) buffer CBuffer {
    mat3 affineC[]; // APIC affine velocity field
};

layout(std430, binding = 4) buffer FBuffer {
    mat3 F[]; // deformation gradient
};

layout(std430, binding = 5) buffer hashBuffer {
    uint hashCount[];
};

layout(std430, binding = 6) buffer hashBuffer2 {
    uint hashCount2[];
};

layout(std430, binding = 7) buffer indexBuffer {
    uint indices[];
};

layout(std430, binding = 8) buffer offsetBuffer {
    uint offset[];
};

layout(std430, binding = 9) buffer forceBuffer {
    vec4 force[];   //vec3 force + float nearDensity
};

uniform float cellSize;
uniform ivec3 gridRes;
uniform int particleCount;
uniform vec3 gridOrigin;

float densityPoly6(float r2, float h) {
    float factor = 315.0 / (64.0 * 3.1415926535 * pow(h, 9.0));
    return factor * pow(h * h - r2, 3.0);
}

float nearDensityPoly6(float r, float h) {
    float factor = 15.0 / (3.1415926535 * pow(h, 6.0));
    return factor * pow(h - r, 3.0);
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= particleCount) return;

    vec3 pi = positions[id].xyz;
    float density = 0.0;
    float nearDensity = 0.0;
    float h = cellSize;

    vec3 gridEnd = vec3(cellSize * gridRes) + gridOrigin;
    vec3 gridSpacePos = (pi - gridOrigin)/(gridEnd - gridOrigin) * gridRes;
    ivec3 baseCell = ivec3(floor(gridSpacePos));

    for (int dx = -1; dx <= 1; ++dx)
    for (int dy = -1; dy <= 1; ++dy)
    for (int dz = -1; dz <= 1; ++dz) {
        ivec3 neighborCell = baseCell + ivec3(dx, dy, dz);
        if (any(lessThan(neighborCell, ivec3(0))) || any(greaterThanEqual(neighborCell, gridRes))) continue;

        uint hash = uint(neighborCell.x + neighborCell.y * gridRes.x + neighborCell.z * gridRes.x * gridRes.y);
        uint start = offset[hash];
        uint end = start + hashCount[hash];

        for (uint j = start; j < end; ++j) {
            uint neighborIdx = indices[j];
            vec3 pj = positions[neighborIdx].xyz;
            vec3 rij = pi - pj;
            float r2 = dot(rij, rij);
            if (r2 < h * h) {
                density += densityPoly6(r2, h);
                nearDensity += nearDensityPoly6(sqrt(r2),h);
            }
        }
    }

    positions[id].w = density;
    force[id].w = nearDensity;
}
